package tutorial.webapp.people

case class Scores(squat: Double, front: Double, deadlift: Double, bench: Double, strict: Double)

case class Targets(squat: List[Double], front: List[Double], deadlift: List[Double], bench: List[Double], strict: List[Double])

object StevesData {
  val percs: Map[Int, List[Double]] = Map(1 -> List(0.5, 0.7, 0.8, 0.85, 0.9),
    2 -> List(0.5, 0.55, 0.65, 0.7, 0.8),
    3 -> List(0.55, 0.6, 0.7, 0.75, 0.85),
    4 -> List(0.6, 0.75, 0.8, 0.85, 0.9),
    5 -> List(0.65, 0.8, 0.85, 0.9, 0.95))

  val nums = Map("Hamish" -> Scores(124.6, 100.0, 170.5, 110.0, 70.0),
    "Tom" -> Scores(102, 84, 113.75, 69.3, 47),
    "Adam" -> Scores(88, 81, 105, 74.6, 54),
    "Dave" -> Scores(126.5, 104, 125, 93.5, 57)
  )

  val formatter = java.text.NumberFormat.getInstance

  def weights(name: String, week: Int) = {
    val ns: Scores = nums.getOrElse(name, Scores(0,0,0,0,0))
    val ps = percs.getOrElse(week, List())

    (ns, ps)
  }

  def squat(name: String, week: Int) = {
    val (ns, ps) = weights(name, week)
    ps.map(_ * ns.squat).map(_.toInt)
  }

  def front(name: String, week: Int) = {
    val (ns, ps) = weights(name, week)
    ps.map(_ * ns.front).map(_.toInt)
  }

  def deadlift(name: String, week: Int) = {
    val (ns, ps) = weights(name, week)
    ps.map(_ * ns.front).map(_.toInt)
  }

  def bench(name: String, week: Int) = {
    val (ns, ps) = weights(name, week)
    ps.map(_ * ns.front).map(_.toInt)
    }

    def front(name: String, week: Int) = {
    val (ns, ps) = weights(name, week)
    ps.map(_ * ns.front).map(_.toInt)
  }
}

